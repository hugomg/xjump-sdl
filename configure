#!/bin/sh

# Help message
# ------------
# The command line flags for this congfigure script are inspired by the GNU
# conventions. They are documented in the following links:
# https://www.gnu.org/prep/standards/html_node/Configuration.html
# https://www.gnu.org/software/make/manual/html_node/Makefile-Conventions.html

show_usage() {
    cat <<EOF
Usage: $0 [OPTION]... [VAR=VALUE]...
Configure the installation location and compilation options for Xjump.

By default, \`make install' will install all the files under /usr/local.
You can use the --prefix flag to choose a different location. Defaults for the
options are specified in brackets.

To set compilation variables (e.g. CC, CFLAGS), specify them as VAR=VALUE.
Most of the time it's fine to leave these in the default setting. We use
pkg-config to figure out the appropriate compilation flags for SDL.

General:
    -h, --help         display this help and exit

Instalation directories:
    --prefix=PREFIX    root installation directory [/usr/local]
    --bindir=DIR       where to install executables [PREFIX/bin]
    --datadir=DIR      where to install data files [PREFIX/share]

Compilation variables:
    CC                 C compiler command
    CFLAGS             C compiler flags (-O2 -Wall ...)
    CPPFLAGS           C preprocessor flags (-I<dir> ...)

    LDFLAGS            Linker flags (-L<dir> ...)
    LIBS               Libraries (-l<library> ...)

    SDL_CFLAGS         Additional flags for compiling with SDL2
    SDL_LIBS           Additional flags for linking with SDL2
EOF
}


# Default values
# --------------
# Note that all the following strings are single quoted. The idea is that we
# will pass the "$vars" as-is to the makefile, which will in turn perform macro
# and shell expansion. The GNU conventions expect this behavior so that we can
# override the installation directories when invoking make.

version='3.0'

# shellcheck disable=SC2016
{
    prefix='/usr/local'
    bindir='${prefix}/bin'
    datadir='${prefix}/share'
    othervars=
}

set_sdl_cflags=no
set_sdl_libs=no
set_othervars=no

# Command-line parsing
# --------------------

nl='
'

while test $# -gt 0; do
    key=${1%%=*}
    val=${1#*=}
    case "$1" in
        -h|--help)
            show_usage
            exit 0
            ;;

        --prefix)  prefix=$2; shift;;
        --bindir)  bindir=$2; shift;;
        --datadir) datadir=$2; shift;;

        --prefix=*|prefix=*)   prefix=$val;;
        --bindir=*|bindir=*)   bindir=$val;;
        --datadir=*|datadir=*) datadir=$val;;

        -*|--*)
            echo >&2 "ERROR: Unrecognized option $1"
            exit 1
            ;;

        SDL_CFLAGS=*)
            SDL_CFLAGS=$val
            set_sdl_cflags=yes
            ;;

        SDL_LIBS=*)
            SDL_LIBS=$val
            set_sdl_libs=yes
            ;;

        *=*)
            othervars="${othervars}${key} = ${val}${nl}"
            set_othervars=yes
            ;;
    esac
    shift
done

# Check for absolute directories
# ------------------------------
# The installation directories will be hardcoded into the executable so it is
# important that they be absolute directories. We also forbid any paths that
# start with a "~". They can be problematic because shell tilde expansion only
# happens if the tilde is at the start of the word. The end result is that
# the tilde would be expanded when we present the installation paths to the
# user but it not when those paths are used in other places.

# shellcheck disable=SC2154
for varname in prefix bindir datadir; do
    eval "value=\$$varname"
    case "$value" in
        /*)
            # Is an absolute path
            ;;
        \$*)
            # Assume that variable references expand to an absolute path
            ;;
        \~*)
            echo >&2 "ERROR: Please write \$HOME instead of ~ for the --$varname."
            exit 1
            ;;
        *)
            echo >&2 "ERROR: Please specify an absolute path for --$varname."
            echo >&2 "       $value is not an absolute path."
            exit 1
            ;;
    esac
done


# Find where SDL is installed
# ---------------------------

# As a concession for people who don't have pkg-config set up, assume that the
# library is installed if the user is setting the relevant compilation flags.

if [ "$set_sdl_cflags" != yes ] || [ "$set_sdl_libs" != yes ]; then
    if ! pkg-config sdl2 --exists; then
        cat >&2 <<EOF
ERROR: pkg-config could not find the header files for SDL2.
If the dev package of SDL2 is not already installed, please install it first.
If it is already installed, one way to avoid this error is to call configure
again while specifying appropriate values for the SDL_CFLAGS and SDL_LIBS
compilation variables.
EOF
        exit 1
    fi
fi

if [ "$set_sdl_cflags" != "yes" ]; then
    SDL_CFLAGS=$(pkg-config sdl2 --cflags)
fi

if [ "$set_sdl_libs" != "yes" ]; then
    SDL_LIBS=$(pkg-config sdl2 --libs)
fi

# Generate the config.mk
# ----------------------
# Store the information where the makefile can see it. The advantage of using
# an include file for the configuration, as opposed to generating the entire
# mkefile from a template, is that we don't need to rerun the configure script
# if we make changes to the makefile.

cat > config.mk <<EOF
# Generated by the ./configure script
version = $version
prefix  = $prefix
bindir  = $bindir
datadir = $datadir
SDL_CFLAGS = $SDL_CFLAGS
SDL_LIBS   = $SDL_LIBS
EOF
if [ "$othervars" ]; then
    printf "%s" "$othervars" >> config.mk
fi

# Report the results
# ------------------
# Finally, tell the user where things are going to be installed, showing the
# actual directories without the ${} indirections. The evals here are on
# purpose. Remember that the contents of these variables are subject to
# parameter expansion when they finally hit the shell inside the makefile.

eval prefix="$prefix"
eval bindir="$bindir"
eval datadir="$datadir"

cat <<EOF
Configuration sucessful.
Run \`make\` and \`sudo make install\` to proceed with the installation.

Xjump will be installed to       : ${prefix}
Xjump will install executables in: ${bindir}
Xjump will install data files in : ${datadir}
EOF
if [ "$set_sdl_cflags" = yes ]; then
    echo "SDL_CFLAGS = $SDL_CFLAGS"
fi
if [ "$set_sdl_libs" = yes ]; then
    echo "SDL_LIBS = $SDL_LIBS"
fi
if [ "$set_othervars" = yes ]; then
    printf "%s" "$othervars"
fi

exit 0
