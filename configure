#!/bin/sh

version='3.0'

#
# Functions
#

usage() {
    cat <<EOF
Usage: $0 [OPTION]... [VAR=VALUE]...
Configure the installation location and compilation options for Xjump.

By default, \`make install' will install all the files under /usr/local.
You can use the --prefix flag to choose a different location. Defaults for the
options are specified in brackets.

To set compilation variables (e.g. CC, CFLAGS), specify them as VAR=VALUE.
Most of the time it's fine to leave these in the default setting. We use
pkg-config to figure out the appropriate compilation flags for SDL.

General:
    -h, --help         display this help and exit

Instalation directories:
    --prefix=PREFIX    root installation directory [/usr/local]
    --bindir=DIR       where to install executables [PREFIX/bin]
    --datadir=DIR      where to install data files [PREFIX/share]

Compilation variables:
    CC                 C compiler command
    CFLAGS             C compiler flags (-O2 -Wall ...)
    CPPFLAGS           C preprocessor flags (-I<dir> ...)

    LDFLAGS            Linker flags (-L<dir> ...)
    LIBS               Libraries (-l<library> ...)

    SDL2_CFLAGS        Additional flags for compiling with SDL2
    SDL2_LIBS          Additional flags for linking with SDL2
EOF
}

absolute() {
    # Convert an installation directory to an absolute path.
    # Since some distros don't have realpath, only try calling if if we actually need to.
    # Note: the installation directory might not exist, so we cannot use `readlink -f`
    case "$1" in
        /*) printf "%s" "$1";;
        *) realpath -m "$1";;
    esac
}

canonicalization_error() {
    echo >&2 "Please specify an absolute path for $1."
    echo >&2 "We tried using realpath to get an absolute path but that did not work."
    exit 1
}

escape_c() {
    printf "%s" "$1" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g'
}

escape_make() {
    printf "%s" "$1" | sed -e 's/\\/\\\\/g' -e 's/\$/$$/g' -e 's/#/\\#/g'
}

nl='
'

#
# Command-line parsing
#

# To keep things simple we require that options with parameters use the --key=val syntax, including
# the equals sign. For a list of the relevant directories, see
# https://www.gnu.org/software/make/manual/html_node/Directory-Variables.html

prefix=
bindir=
datadir=
variables=

set_sdl_cflags=no
set_sdl_libs=no

for arg in "$@"; do
    key="${arg%%=*}"
    value="${arg#*=}"
    case "$arg" in
        -h|--help)
            usage
            exit 0
            ;;

        --prefix=*)
            prefix=$value
            ;;

        --bindir=*)
            bindir=$value
            ;;

        --datadir=*)
            datadir=$value
            ;;

        -*)
            echo >&2 "Unrecognized option $arg"
            exit 1
            ;;

        *=*)
            line="${key} = $(escape_make "$value")"
            variables="${variables}${nl}${line}"
            if [ "$key" = "SDL_CFLAGS" ]; then set_sdl_cflags=yes; fi
            if [ "$key" = "SDL_LIBS" ];   then set_sdl_libs=yes; fi
            ;;
    esac
done

# Check for the required dependencies. As a concession for people who don't
# have pkg-config set up, assume that the library is installed if the user is
# setting the relevant compilation flags by hand.
if [ "$set_sdl_cflags" = no ] || [ "$set_sdl_libs" = no ]; then
    if ! pkg-config sdl2 --exists; then
        cat >&2 <<EOF
ERROR: pkg-config could not find the header files for SDL2.
If the dev package of SDL2 is not already installed, please install it first.
If it is already installed, please call configure again specifying values for
SDL_CFLAGS and SDL_LIBS so that we can know where to find it.
EOF
        exit 1
    fi
fi

# Now we compute the final values of the installation directories and hardcode
# them to the config.mk and the config.h. This is intentionally different from
# how autoconf does things. They prefer computing the final values of these in
# the makefile, so that the user is able to override the installation prefix
# when they call `make` and `make install`. To be honest, I don't think that I
# agree with them. Setting a different prefix during installation is a recipe
# for not being able to find the files that we want. Additionally, having the
# congifuration be in the config.h (as opposed to in -D flags in the makefile)
# helps my linter figure out what is going on.
[ -z "$prefix" ]  && prefix="/usr/local"
[ -z "$bindir" ]  && bindir="$prefix/bin"
[ -z "$datadir" ] && datadir="$prefix/share"

prefix=$(absolute "$prefix")   || canonicalization_error --prefix
bindir=$(absolute "$bindir")   || canonicalization_error --bindir
datadir=$(absolute "$datadir") || canonicalization_error --datadir

# Finally, store the information where the makefile can see it and tell the
# user where things are going to be installed.
cat > config.mk <<EOF
# Generated by the ./configure script
version = $(escape_make "$version")
prefix  = $(escape_make "$prefix")
bindir  = $(escape_make "$bindir")
datadir = $(escape_make "$datadir")$variables
EOF

cat > config.h <<EOF
/* Generated by the ./configure script */
#define XJUMP_VERSION "$(escape_c "$version")"
#define XJUMP_PREFIX  "$(escape_c "$prefix")"
#define XJUMP_BINDIR  "$(escape_c "$bindir")"
#define XJUMP_DATADIR "$(escape_c "$datadir")"
EOF

cat <<EOF
Configuration sucessful.
Run \`make\` and \`sudo make install\` to continue the installation.

Xjump will be installed to       : ${prefix}
Xjump will install executables in: ${bindir}
Xjump will install data files in : ${datadir}$variables
EOF

exit 0
