#!/bin/sh

# Help message
# ------------
# The command line flags for this congfigure script are inspired by the GNU
# conventions. You can find more info about that in the following links:
# https://www.gnu.org/prep/standards/html_node/Configuration.html
# https://www.gnu.org/software/make/manual/html_node/Makefile-Conventions.html

usage() {
    cat <<EOF
Usage: $0 [OPTION]... [VAR=VALUE]...
Configure the installation location and compilation options for Xjump.

By default, \`make install' will install all the files under /usr/local.
You can use the --prefix flag to choose a different location. Defaults for the
options are specified in brackets.

To set compilation variables (e.g. CC, CFLAGS), specify them as VAR=VALUE.
Most of the time it's fine to leave these in the default setting. We use
pkg-config to figure out the appropriate compilation flags for SDL.

General:
    -h, --help         display this help and exit

Instalation directories:
    --prefix=PREFIX    root installation directory [/usr/local]
    --bindir=DIR       where to install executables [PREFIX/bin]
    --datadir=DIR      where to install data files [PREFIX/share]

Compilation variables:
    CC                 C compiler command
    CFLAGS             C compiler flags (-O2 -Wall ...)
    CPPFLAGS           C preprocessor flags (-I<dir> ...)

    LDFLAGS            Linker flags (-L<dir> ...)
    LIBS               Libraries (-l<library> ...)

    SDL_CFLAGS        Additional flags for compiling with SDL2
    SDL_LIBS          Additional flags for linking with SDL2
EOF
}


# Default values
# --------------
# Note that all the following strings are single quoted. Believe it or not,
# everything that you pass as a parameter to make will eventually go through
# Make macro expansion followed by Shell word expansion. Don't entertain the
# notion that these compiler flags and installation directories are just plain
# strings. Any parameters containing special characters like $ or spaces will
# be ruthlessly macro expanded and word split as soon as the makefile tries to
# use them, whether you like it or not. Anyway, the GNU conventions use this
# feature intentionally when setting the default values for the installation
# directories. This way, if the user overrides the root prefix when they call
# `make` then it updates the other definitions too.

version='3.0'

prefix='/usr/local'
bindir='${prefix}/bin'
datadir='${prefix}/share'

sdl_cflags=
sdl_libs=
othervars=

set_sdl_cflags=no
set_sdl_libs=no
set_othervars=no


# Command-line parsing
# --------------------
# To keep things simple we require that options with parameters use the
# --key=value notation. Please don't use --key value, whithout the "=".

nl='
'

for arg in "$@"; do
    key="${arg%%=*}"
    value="${arg#*=}"
    case "$arg" in
        -h|--help)
            usage
            exit 0
            ;;

        --prefix=*)
            prefix=$value
            ;;

        --bindir=*)
            bindir=$value
            ;;

        --datadir=*)
            datadir=$value
            ;;

        -*)
            echo >&2 "Unrecognized option $arg"
            exit 1
            ;;

        SDL_CFLAGS=*)
            sdl_cflags=$value
            set_sdl_cflags=yes
            ;;

        SDL_LIBS=*)
            sdl_libs=$value
            set_sdl_cflags=yes
            ;;

        *=*)
            othervars="${othervars}${key} = ${value}${nl}"
            set_othervars=yes
            ;;
    esac
done


# Check for dependencies
# ----------------------
# As a concession for people who don't have pkg-config set up, assume that the
# library is installed if the user is setting the relevant compilation flags.

if [ "$set_sdl_cflags" = no ] || [ "$set_sdl_libs" = no ]; then
    if ! pkg-config sdl2 --exists; then
        cat >&2 <<EOF
ERROR: pkg-config could not find the header files for SDL2.
If the dev package of SDL2 is not already installed, please install it first.
If it is already installed, one way to avoid this error is to call configure
again while specifying appropriate values for the SDL_CFLAGS and SDL_LIBS
compilation variables.
EOF
        exit 1
    fi
fi

if [ "$set_sdl_cflags" = no ]; then
    sdl_cflags=$(pkg-config sdl2 --cflags)
fi

if [ "$set_sdl_libs" = no ]; then
    sdl_libs=$(pkg-config sdl2 --libs)
fi


# Generate the config.mk
# ----------------------
# Store the information where the makefile can see it. The advantage of using
# an include file for the configuration, as opposed to generating the entire
# mkefile from a template, is that we don't need to rerun the configure script
# if we make changes to the makefile.

cat > config.mk <<EOF
# Generated by the ./configure script
version = $version
prefix  = $prefix
bindir  = $bindir
datadir = $datadir
SDL_CFLAGS = $sdl_cflags
SDL_LIBS   = $sdl_libs
EOF
if [ "$othervars" ]; then
    printf "%s" "$othervars" >> config.mk
fi

# Report the results
# ------------------
# Finally, tell the user where things are going to be installed, showing the
# actual directories without the ${} indirections. If you think that eval is
# weird, remember that the makefile also treats these variables as shell code
# then it expands them.

eval prefix="${prefix}"
eval bindir="${bindir}"
eval datadir="${datadir}"

cat <<EOF
Configuration sucessful.
Run \`make\` and \`sudo make install\` to continue the installation.

Xjump will be installed to       : ${prefix}
Xjump will install executables in: ${bindir}
Xjump will install data files in : ${datadir}
EOF
if [ "$set_sdl_cflags" = yes ]; then
    echo "SDL_CFLAGS = $sdl_cflags"
fi
if [ "$set_sdl_libs" = yes ]; then
    echo "SDL_LIBS = $sdl_libs"
fi
if [ "$set_othervars" = yes ]; then
    printf "%s" "$othervars"
fi

exit 0
